# Implementation of classic arcade game Pong

#execute
# http://www.codeskulptor.org/#user23_v8aPFtsV9iCNPcO.py


import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [2,2]
score1 = 0
score2 = 0

paddle1_vel = 0
paddle2_vel = 0

paddle1_pos = [PAD_WIDTH,HEIGHT / 2]
paddle2_pos = [WIDTH - PAD_WIDTH,HEIGHT / 2]

# initialize ball_pos and ball_vel for new ball in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    #horizontal random.randrange(120, 240) per second with a draw frequency of 60 fps 120/60 = 2
    # vertical random.randrange(60, 180)
    h = random.randrange(2.0, 4.0)
    v = random.randrange(1.0, 3.0)
    if direction == RIGHT:     		#RIGHT-upper right
        ball_vel = [h,-v]
    elif direction == LEFT: 
        ball_vel = [-h,-v]			#LEFT-upper left

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    
    paddle1_vel = 0
    paddle2_vel = 0
    
    paddle1_pos = [PAD_WIDTH,HEIGHT / 2]
    paddle2_pos = [WIDTH - PAD_WIDTH,HEIGHT / 2]
    
    spawn_ball(random.choice([RIGHT,LEFT]))   #randon choice of initial direction

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
 
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0] 
    ball_pos[1] += ball_vel[1]
    
######Top and botton collision with walls control    
    if (ball_pos[1] <= BALL_RADIUS) or (ball_pos[1] >= (HEIGHT - BALL_RADIUS)):    
        ball_vel[1] = - ball_vel[1]       
        
######Gutter and paddle collision control logic 
    if ( ball_pos[0] - BALL_RADIUS <= PAD_WIDTH):   #ball in left gutter or paddle collision
        if  (ball_pos[1] - BALL_RADIUS >= paddle1_pos[1]- HALF_PAD_HEIGHT) and (ball_pos[1] - BALL_RADIUS <= paddle1_pos[1]+ HALF_PAD_HEIGHT):
            ball_vel[0] = - ball_vel[0]
            increase_vel()
        else:  # gutter
            score2 += 1
            spawn_ball(RIGHT)  
        
    if ( (ball_pos[0] + BALL_RADIUS) >= (WIDTH - PAD_WIDTH) ):    #ball in right gutter
        if  (ball_pos[1] + BALL_RADIUS >= paddle2_pos[1]- HALF_PAD_HEIGHT) and (ball_pos[1] + BALL_RADIUS <= paddle2_pos[1]+ HALF_PAD_HEIGHT):
            ball_vel[0] = - ball_vel[0]
            increase_vel()
        else:  #gutter
            spawn_ball(LEFT)
            score1 += 1
  
    # draw ball
    c.draw_circle((ball_pos[0], ball_pos[1]), 20, 2,"Red","White")  
    
    # update paddle's vertical position, keep paddle on the screen

    
    if (paddle1_pos[1] - HALF_PAD_HEIGHT > 0) and (paddle1_pos[1] + HALF_PAD_HEIGHT < HEIGHT):
        paddle1_pos[0] = PAD_WIDTH/2
        paddle1_pos[1] += paddle1_vel
    elif (paddle1_pos[1] - HALF_PAD_HEIGHT <= 0):   
        paddle1_vel = 0
        paddle1_pos[1] = HALF_PAD_HEIGHT + 1
    elif (paddle1_pos[1] + HALF_PAD_HEIGHT >= HEIGHT): 
        paddle1_vel = 0
        paddle1_pos[1] = (HEIGHT - HALF_PAD_HEIGHT) - 1
            
       
    if (paddle2_pos[1] - HALF_PAD_HEIGHT > 0) and (paddle2_pos[1] + HALF_PAD_HEIGHT < HEIGHT):  
        paddle2_pos[0] = PAD_WIDTH/2
        paddle2_pos[1] += paddle2_vel
    elif (paddle2_pos[1] - HALF_PAD_HEIGHT <= 0):   
        paddle2_vel = 0
        paddle2_pos[1] = HALF_PAD_HEIGHT + 1
    elif (paddle2_pos[1] + HALF_PAD_HEIGHT >= HEIGHT): 
        paddle2_vel = 0
        paddle2_pos[1] = (HEIGHT - HALF_PAD_HEIGHT) - 1

    # draw paddles paddle1_vel, paddle2_vel
    c.draw_line([PAD_WIDTH/2, paddle1_pos[1]-HALF_PAD_HEIGHT],[PAD_WIDTH/2,paddle1_pos[1]+HALF_PAD_HEIGHT ], 11, "White")
    c.draw_line([WIDTH-PAD_WIDTH/2, paddle2_pos[1]-HALF_PAD_HEIGHT],[WIDTH-PAD_WIDTH/2,paddle2_pos[1]+HALF_PAD_HEIGHT ], 11, "White")

    # draw scores
    c.draw_text(str(score1), (260, 50), 60, 'White', "monospace")  
    c.draw_text(str(score2), (310, 50), 60, 'White', "monospace")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 1    
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel += -acc
    elif key==simplegui.KEY_MAP["s"]: 
        paddle1_vel += acc
    elif key==simplegui.KEY_MAP["w"]: 
        paddle1_vel += -acc
        
def keyup(key):
    global paddle1_vel, paddle2_vel

 ##Helper functions   
def button_handler():
    global score1, score2
    score1 = 0
    score2 = 0
    
    new_game()
   
def increase_vel():
    global ball_vel
    ball_vel[0] += ball_vel[0]*0.1
    ball_vel[1] += ball_vel[1]*0.1

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
restart = frame.add_button('Restart', button_handler)

# start frame
new_game()
frame.start()
